{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","doQuick","low","high","pElement","exch","partition","temp","swap","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","value","this","setState","resetArray","min","max","random","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","isPartition","barIndex","partBarStyle","barOneIndex","barTwoIndex","barStyle","N","getSelectionSortAnimations","getAnimations","getInsertionSortAnimations","className","map","idx","class","orientation","onChange","setSpeed","onClick","mergeSort","quickSort","selectionSort","insertionSort","React","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3fb505d1.chunk.js","sourcesContent":["/* MERGESORT */\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n  \nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n/* QUICKSORT */\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (high <= low) return;\n  //partition array\n  let j = partition(array, low, high, animations);\n  // sort low\n  doQuick(array, low, j-1, animations);\n  //sort high\n  doQuick(array, j+1, high, animations);\n}\n\nfunction partition(array, low, high, animations) {\n  let i = low, j = high+1;\n  let pElement = array[low];\n  // Set color of partitioning element to black\n  animations.push([\"partition1\", low]);\n  while (true) {\n    while (array[++i] < pElement) {\n      if (i === high) break;\n    }\n    while (pElement < array[--j]) {\n      if (j === low) break;\n    }\n    if (i >= j) break;\n    exch(array, i, j, animations);\n  }\n  exch(array, low, j, animations);\n  animations.push([\"partition2\", low]);\n  return j;\n}\n\nfunction exch(array, i, j, animations) {\n  let temp = array[i];\n  // Set elements being compared to Red\n  animations.push([\"comparison1\", i, j]);\n  // Swap sizes of both indexes\n  animations.push([\"swap\", i, array[j]]);\n  animations.push([\"swap\", j, temp]);\n  let swap = array[i];\n  array[i] = array[j];\n  array[j] = swap;\n  // Change elements being compared back to green\n  animations.push([\"comparison2\", i, j]);\n}\n\n/* SELCTION SORT */\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  let N = array.length;\n  for (let i = 0; i < N; i++) {\n    let min = i;\n    for (let j = i+1; j < N; j++) {\n      if (array[j] < array[min]) min = j;\n    }\n    exch(array, i, min, animations);\n  }\n  return animations;\n}\n\n/* INSERTION SORT */\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  let N = array.length;\n  for (let i = 1; i < N; i++) {\n    for (let j = i; j > 0 && (array[j] < array[j-1]); j--) {\n      exch(array, j, j-1, animations);\n    }\n  }\n  return animations;\n}\n\n\n","import React, { Component } from \"react\";\nimport {getMergeSortAnimations, getQuickSortAnimations, getSelectionSortAnimations, getInsertionSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Slider from 'react-rangeslider';\nimport 'react-rangeslider/lib/index.css';\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// This is the color of the partitioning element throughout the animations.\nconst TERTIARY_COLOR = 'black';\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            ANIMATION_SPEED_MS: 4,\n            NUMBER_OF_ARRAY_BARS: 100\n        };\n    }\n\n    setSpeed(value) {\n        this.setState({\n          ANIMATION_SPEED_MS: value\n        })\n      }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i=0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            }\n        }\n        // await this.colorWhenDone(animations);\n    }\n\n    // colorWhenDone(animations) {\n    //     for (let i = 0; i < animations.length; i++) {\n    //         const arrayBars = document.getElementsByClassName('array-bar');\n    //         const barStyle = arrayBars[i].style;\n    //         barStyle.backgroundColor = SECONDARY_COLOR;\n    //         console.log(arrayBars[i]);\n    //     }\n    // }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const isPartition = animations[i][0] === \"partition1\" || animations[i][0] === \"partition2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isPartition === true) {\n                const[partition, barIndex] = animations[i];\n                const color = (animations[i][0] === \"partition1\") ?  TERTIARY_COLOR : PRIMARY_COLOR;\n                const partBarStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    partBarStyle.backgroundColor = color;\n                }, i * this.state.ANIMATION_SPEED_MS)\n            }\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * this.state.ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * this.state.ANIMATION_SPEED_MS);  \n            }        \n            } \n        } \n\n    getAnimations(animations) {\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * this.state.ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * this.state.ANIMATION_SPEED_MS);  \n            }        \n        } \n    }\n\n    selectionSort() {\n        const animations = getSelectionSortAnimations(this.state.array);\n        this.getAnimations(animations);\n    }\n\n    insertionSort() {\n        const animations = getInsertionSortAnimations(this.state.array);\n        this.getAnimations(animations);  \n    }\n\n    render() {\n    const {array} = this.state;\n\n    return (\n        <div>\n        <div className=\"array-container\">\n            {array.map((value, idx) => (\n                <div className=\"array-bar\" key={idx} \n                    style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`,\n                    }}>\n                </div>\n            ))}\n        </div>\n        <div class=\"topnav\">\n            <Slider\n                class='range-slider1'\n                min={0}\n                max={10}\n                value={this.state.ANIMATION_SPEED_MS}\n                orientation=\"horizontal\"\n                onChange={(value) => this.setSpeed(value)}\n            />\n            <div className='value'>Speed: {this.state.ANIMATION_SPEED_MS} ms</div>\n            <div className='reset_button'>\n                <button className='button' onClick={() => this.resetArray()}>Generate New Array</button>\n            </div>\n            <div className='sort_buttons'>\n                <button className='button' onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button className='button' onClick={() => this.quickSort()}>Quick Sort</button>\n                <button className='button' onClick={() => this.selectionSort()}>Selection Sort</button>\n                <button className='button' onClick={() => this.insertionSort()}>Insertion Sort</button>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer>\n            \n            </SortingVisualizer>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}