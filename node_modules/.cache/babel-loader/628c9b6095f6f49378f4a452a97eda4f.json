{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n/* QUICKSORT */\n\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const pivot = array[array.length - 1];\n  const leftArr = [];\n  const rightArr = [];\n\n  for (const el of array.slice(0, array.length - 1)) {\n    el <= pivot ? leftArr.push(el) : rightArr.push(el);\n    animations.push([\"comparison1\", el, pivot]); //To colour the compared values\n\n    animations.push([\"comparison2\", el, pivot]); //To take the colours off\n  }\n\n  let sortArray = [...getQuickSortAnimations(leftArr), pivot, ...getQuickSortAnimations(rightArr)];\n  return [animations, sortArray];\n} // export function getQuickSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//     console.log(array);\n//   doQuick(shuffle(array), 0, array.length - 1, animations);\n//     console.log(array);\n//   return animations;\n// }\n// function shuffle(array) {\n//   var currentIndex = array.length, temporaryValue, randomIndex;\n//   // While there remain elements to shuffle...\n//   while (0 !== currentIndex) {\n//     // Pick a remaining element...\n//     randomIndex = Math.floor(Math.random() * currentIndex);\n//     currentIndex -= 1;\n//     // And swap it with the current element.\n//     temporaryValue = array[currentIndex];\n//     array[currentIndex] = array[randomIndex];\n//     array[randomIndex] = temporaryValue;\n//   }\n//   return array;\n// }\n// function doQuick(array, low, high, animations) {\n//   if (high <= low) return;\n//   let j = partition(array, low, high, animations);\n//   animations.push(j);\n//   doQuick(array, low, j-1, animations);\n//   doQuick(array, j+1, high, animations);\n// }\n// function partition(array, low, high, animations) {\n//   let i = low, j = high+1;\n//   let pElement = array[low];\n//   while (true) {\n//     while (array[++i] < pElement) {\n//       animations.push([i, j]);\n//       if (i === high) break;\n//     }\n//     while (pElement < array[--j]) {\n//       if (j === low) break;\n//     }\n//     if (i >= j) break;\n//     animations.push([i, j]);\n//     exch(array, i, j, animations);\n//   }\n//   exch(array, low, j, animations);\n//   return j;\n// }\n// function exch(array, i, j, animations) {\n//   // These are the values that we're comparing; we push them once\n//     // to change their color.\n//     //animations.push([i, j]);\n//     // These are the values that we're comparing; we push them a second\n//     // time to revert their color.\n//     //animations.push([i, j]);\n//   let swap = array[i];\n//   array[i] = array[j];\n//   array[j] = swap;\n//   //console.log(\"in exchange\" + array[i]);\n// }","map":{"version":3,"sources":["/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingAlgorithms/SortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getQuickSortAnimations","pivot","leftArr","rightArr","el","sortArray"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvB,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,cAA7B,EAA6CF,UAA7C,CAAf;AACA,SAAOA,UAAP;AACD;;AAED,SAASI,eAAT,CACEC,SADF,EAEEC,QAFF,EAGEC,MAHF,EAIEL,cAJF,EAKEF,UALF,EAME;AACA,MAAIM,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAH,EAAAA,eAAe,CAACF,cAAD,EAAiBI,QAAjB,EAA2BE,SAA3B,EAAsCH,SAAtC,EAAiDL,UAAjD,CAAf;AACAI,EAAAA,eAAe,CAACF,cAAD,EAAiBM,SAAS,GAAG,CAA7B,EAAgCD,MAAhC,EAAwCF,SAAxC,EAAmDL,UAAnD,CAAf;AACAW,EAAAA,OAAO,CAACN,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCL,cAAzC,EAAyDF,UAAzD,CAAP;AACD;;AAED,SAASW,OAAT,CACEN,SADF,EAEEC,QAFF,EAGEE,SAHF,EAIED,MAJF,EAKEL,cALF,EAMEF,UANF,EAOE;AACA,MAAIY,CAAC,GAAGN,QAAR;AACA,MAAIO,CAAC,GAAGP,QAAR;AACA,MAAIQ,CAAC,GAAGN,SAAS,GAAG,CAApB;;AACA,SAAOK,CAAC,IAAIL,SAAL,IAAkBM,CAAC,IAAIP,MAA9B,EAAsC;AACpC;AACA;AACAP,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIC,CAAJ,CAAhB,EAHoC,CAIpC;AACA;;AACAd,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIC,CAAJ,CAAhB;;AACA,QAAIZ,cAAc,CAACW,CAAD,CAAd,IAAqBX,cAAc,CAACY,CAAD,CAAvC,EAA4C;AAC1C;AACA;AACAd,MAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACW,CAAD,CAAlB,CAAhB;AACAR,MAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACW,CAAC,EAAF,CAA/B;AACD,KALD,MAKO;AACL;AACA;AACAb,MAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACY,CAAD,CAAlB,CAAhB;AACAT,MAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;AACF;;AACD,SAAOD,CAAC,IAAIL,SAAZ,EAAuB;AACrB;AACA;AACAR,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIA,CAAJ,CAAhB,EAHqB,CAIrB;AACA;;AACAb,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIA,CAAJ,CAAhB,EANqB,CAOrB;AACA;;AACAb,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACW,CAAD,CAAlB,CAAhB;AACAR,IAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACW,CAAC,EAAF,CAA/B;AACD;;AACD,SAAOC,CAAC,IAAIP,MAAZ,EAAoB;AAClB;AACA;AACAP,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAJ,CAAhB,EAHkB,CAIlB;AACA;;AACAd,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAJ,CAAhB,EANkB,CAOlB;AACA;;AACAd,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACY,CAAD,CAAlB,CAAhB;AACAT,IAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;AACF;AAED;;;AACA,OAAO,SAASE,sBAAT,CAAgCjB,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB;AACrB,WAAOF,KAAP;AACD;;AAGD,QAAMkB,KAAK,GAAGlB,KAAK,CAACA,KAAK,CAACE,MAAN,GAAa,CAAd,CAAnB;AACA,QAAMiB,OAAO,GAAG,EAAhB;AACA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,MAAMC,EAAX,IAAiBrB,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeJ,KAAK,CAACE,MAAN,GAAa,CAA5B,CAAjB,EAAgD;AAC9CmB,IAAAA,EAAE,IAAIH,KAAN,GAAcC,OAAO,CAACH,IAAR,CAAaK,EAAb,CAAd,GAAiCD,QAAQ,CAACJ,IAAT,CAAcK,EAAd,CAAjC;AACApB,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,aAAD,EAAeK,EAAf,EAAkBH,KAAlB,CAAhB,EAF8C,CAEH;;AAC3CjB,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,aAAD,EAAeK,EAAf,EAAkBH,KAAlB,CAAhB,EAH8C,CAGH;AAE9C;;AAGC,MAAII,SAAS,GAAE,CAAC,GAAGL,sBAAsB,CAACE,OAAD,CAA1B,EAAqCD,KAArC,EAA4C,GAAGD,sBAAsB,CAACG,QAAD,CAArE,CAAf;AAEA,SAAO,CAACnB,UAAD,EAAaqB,SAAb,CAAP;AAED,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n  \nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n/* QUICKSORT */\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) {\n    return array;\n  }\n  \n\n  const pivot = array[array.length-1];\n  const leftArr = [];\n  const rightArr = [];\n  for (const el of array.slice(0, array.length-1)){\n    el <= pivot ? leftArr.push(el) : rightArr.push(el);\n    animations.push([\"comparison1\",el,pivot]); //To colour the compared values\n    animations.push([\"comparison2\",el,pivot]); //To take the colours off\n \n}\n\n\n  let sortArray= [...getQuickSortAnimations(leftArr), pivot, ...getQuickSortAnimations(rightArr)];\n\n  return [animations, sortArray];\n\n}\n\n// export function getQuickSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//     console.log(array);\n//   doQuick(shuffle(array), 0, array.length - 1, animations);\n//     console.log(array);\n//   return animations;\n// }\n\n// function shuffle(array) {\n//   var currentIndex = array.length, temporaryValue, randomIndex;\n\n//   // While there remain elements to shuffle...\n//   while (0 !== currentIndex) {\n\n//     // Pick a remaining element...\n//     randomIndex = Math.floor(Math.random() * currentIndex);\n//     currentIndex -= 1;\n\n//     // And swap it with the current element.\n//     temporaryValue = array[currentIndex];\n//     array[currentIndex] = array[randomIndex];\n//     array[randomIndex] = temporaryValue;\n//   }\n//   return array;\n// }\n\n// function doQuick(array, low, high, animations) {\n//   if (high <= low) return;\n//   let j = partition(array, low, high, animations);\n//   animations.push(j);\n//   doQuick(array, low, j-1, animations);\n//   doQuick(array, j+1, high, animations);\n// }\n\n// function partition(array, low, high, animations) {\n//   let i = low, j = high+1;\n//   let pElement = array[low];\n//   while (true) {\n//     while (array[++i] < pElement) {\n//       animations.push([i, j]);\n//       if (i === high) break;\n//     }\n//     while (pElement < array[--j]) {\n//       if (j === low) break;\n//     }\n//     if (i >= j) break;\n//     animations.push([i, j]);\n//     exch(array, i, j, animations);\n//   }\n//   exch(array, low, j, animations);\n//   return j;\n// }\n\n// function exch(array, i, j, animations) {\n//   // These are the values that we're comparing; we push them once\n//     // to change their color.\n//     //animations.push([i, j]);\n//     // These are the values that we're comparing; we push them a second\n//     // time to revert their color.\n//     //animations.push([i, j]);\n//   let swap = array[i];\n//   array[i] = array[j];\n//   array[j] = swap;\n//   //console.log(\"in exchange\" + array[i]);\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}