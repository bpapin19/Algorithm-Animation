{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from \"react\";\nimport { getMergeSortAnimations, getQuickSortAnimations, getSelectionSortAnimations, getInsertionSortAnimations } from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; // This is the color of the partitioning element throughout the animations.\n\nconst TERTIARY_COLOR = 'black';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 100; i++) {\n      array.push(randomIntFromInterval(5, 1000));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight / 2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    for (let i = 0; i < animations.length; i++) {\n      const barStyle = arrayBars[i].style;\n      barStyle.backgroundColor = SE;\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n      const isPartition = animations[i][0] === \"partition1\" || animations[i][0] === \"partition2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isPartition === true) {\n        const [partition, barIndex] = animations[i];\n        const color = animations[i][0] === \"partition1\" ? TERTIARY_COLOR : PRIMARY_COLOR;\n        const partBarStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          partBarStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n      if (isColorChange === true) {\n        const [comparison, barOneIndex, barTwoIndex] = animations[i];\n        const color = animations[i][0] === \"comparison2\" ? PRIMARY_COLOR : SECONDARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex] ? arrayBars[barOneIndex].style : {};\n        const barTwoStyle = arrayBars[barTwoIndex] ? arrayBars[barTwoIndex].style : {};\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight / 2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  getAnimations(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const [comparison, barOneIndex, barTwoIndex] = animations[i];\n        const color = animations[i][0] === \"comparison2\" ? PRIMARY_COLOR : SECONDARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex] ? arrayBars[barOneIndex].style : {};\n        const barTwoStyle = arrayBars[barTwoIndex] ? arrayBars[barTwoIndex].style : {};\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight / 2}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    this.getAnimations(animations);\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    this.getAnimations(animations);\n  }\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value / 2}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.resetArray(),\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.mergeSort(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.quickSort(),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.selectionSort(),\n        children: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.insertionSort(),\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.testSortingAlgorithms(),\n        children: \"Test Sorting Algorithms (BROKEN)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getSelectionSortAnimations","getInsertionSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","barStyle","SE","quickSort","isPartition","partition","barIndex","partBarStyle","comparison","barOneIndex","barTwoIndex","swap","getAnimations","selectionSort","insertionSort","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {getMergeSortAnimations, getQuickSortAnimations, getSelectionSortAnimations, getInsertionSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// This is the color of the partitioning element throughout the animations.\nconst TERTIARY_COLOR = 'black';\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i=0; i < 100; i++) {\n            array.push(randomIntFromInterval(5, 1000));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight/2}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n        for (let i = 0; i < animations.length; i++) {\n            const barStyle = arrayBars[i].style;\n            barStyle.backgroundColor = SE;\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const isPartition = animations[i][0] === \"partition1\" || animations[i][0] === \"partition2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isPartition === true) {\n                const[partition, barIndex] = animations[i];\n                const color = (animations[i][0] === \"partition1\") ?  TERTIARY_COLOR : PRIMARY_COLOR;\n                const partBarStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    partBarStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS)\n            }\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight/2}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        \n            } \n        } \n\n    getAnimations(animations) {\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight/2}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        \n        } \n    }\n\n    selectionSort() {\n        const animations = getSelectionSortAnimations(this.state.array);\n        this.getAnimations(animations);\n    }\n\n    insertionSort() {\n        const animations = getInsertionSortAnimations(this.state.array);\n        this.getAnimations(animations);  \n    } \n\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n          const array = [];\n          const length = randomIntFromInterval(1, 1000);\n          for (let i = 0; i < length; i++) {\n            array.push(randomIntFromInterval(-1000, 1000));\n          }\n          const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n          const mergeSortedArray = getMergeSortAnimations(array.slice());\n          console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n      }\n\n    render() {\n    const {array} = this.state;\n\n    return (\n        <div className=\"array-container\">\n            {array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value/2}px`,\n                }}></div>\n            ))}\n            <button onClick={() => this.resetArray()}>Generate New Array</button>\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\n            <button onClick={() => this.selectionSort()}>Selection Sort</button>\n            <button onClick={() => this.insertionSort()}>Insertion Sort</button>\n            <button onClick={() => this.testSortingAlgorithms()}>\n                Test Sorting Algorithms (BROKEN)\n            </button>\n        </div>\n    );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n      }\n    }\n    return true;\n  }"]},"metadata":{},"sourceType":"module"}