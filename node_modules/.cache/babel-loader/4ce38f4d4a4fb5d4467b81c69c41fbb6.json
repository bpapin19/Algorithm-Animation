{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport { getMergeSortAnimations, getQuickSortAnimations, getSelectionSortAnimations, getInsertionSortAnimations } from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Slider from 'react-rangeslider';\nimport 'react-rangeslider/lib/index.css'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; // This is the color of the partitioning element throughout the animations.\n\nconst TERTIARY_COLOR = 'black';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      ANIMATION_SPEED_MS: 4,\n      NUMBER_OF_ARRAY_BARS: 100\n    };\n  }\n\n  setSpeed(value) {\n    this.setState({\n      ANIMATION_SPEED_MS: value\n    });\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n    } // await this.colorWhenDone(animations);\n\n  } // colorWhenDone(animations) {\n  //     for (let i = 0; i < animations.length; i++) {\n  //         const arrayBars = document.getElementsByClassName('array-bar');\n  //         const barStyle = arrayBars[i].style;\n  //         barStyle.backgroundColor = SECONDARY_COLOR;\n  //         console.log(arrayBars[i]);\n  //     }\n  // }\n\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n      const isPartition = animations[i][0] === \"partition1\" || animations[i][0] === \"partition2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isPartition === true) {\n        const [partition, barIndex] = animations[i];\n        const color = animations[i][0] === \"partition1\" ? TERTIARY_COLOR : PRIMARY_COLOR;\n        const partBarStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          partBarStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n\n      if (isColorChange === true) {\n        const [comparison, barOneIndex, barTwoIndex] = animations[i];\n        const color = animations[i][0] === \"comparison2\" ? PRIMARY_COLOR : SECONDARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex] ? arrayBars[barOneIndex].style : {};\n        const barTwoStyle = arrayBars[barTwoIndex] ? arrayBars[barTwoIndex].style : {};\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  getAnimations(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const [comparison, barOneIndex, barTwoIndex] = animations[i];\n        const color = animations[i][0] === \"comparison2\" ? PRIMARY_COLOR : SECONDARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex] ? arrayBars[barOneIndex].style : {};\n        const barTwoStyle = arrayBars[barTwoIndex] ? arrayBars[barTwoIndex].style : {};\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    this.getAnimations(animations);\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    this.getAnimations(animations);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"maindiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Algorithm Animations: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topnav\",\n        children: [/*#__PURE__*/_jsxDEV(Slider, {\n          min: 0,\n          max: 10,\n          value: this.state.ANIMATION_SPEED_MS,\n          orientation: \"horizontal\",\n          onChange: value => this.setSpeed(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"value\",\n          children: [\"Speed: \", this.state.ANIMATION_SPEED_MS, \" ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset_button\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => this.resetArray(),\n            children: \"Generate New Array\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sort_buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => this.mergeSort(),\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => this.quickSort(),\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => this.selectionSort(),\n            children: \"Selection Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => this.insertionSort(),\n            children: \"Insertion Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","Component","getMergeSortAnimations","getQuickSortAnimations","getSelectionSortAnimations","getInsertionSortAnimations","Slider","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","SortingVisualizer","constructor","props","state","array","ANIMATION_SPEED_MS","setSpeed","value","setState","componentDidMount","resetArray","i","push","randomIntFromInterval","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","isPartition","partition","barIndex","partBarStyle","comparison","barOneIndex","barTwoIndex","swap","barStyle","getAnimations","selectionSort","insertionSort","render","map","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {getMergeSortAnimations, getQuickSortAnimations, getSelectionSortAnimations, getInsertionSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Slider from 'react-rangeslider';\nimport 'react-rangeslider/lib/index.css';\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// This is the color of the partitioning element throughout the animations.\nconst TERTIARY_COLOR = 'black';\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            ANIMATION_SPEED_MS: 4,\n            NUMBER_OF_ARRAY_BARS: 100\n        };\n    }\n\n    setSpeed(value) {\n        this.setState({\n          ANIMATION_SPEED_MS: value\n        })\n      }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i=0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            }\n        }\n        // await this.colorWhenDone(animations);\n    }\n\n    // colorWhenDone(animations) {\n    //     for (let i = 0; i < animations.length; i++) {\n    //         const arrayBars = document.getElementsByClassName('array-bar');\n    //         const barStyle = arrayBars[i].style;\n    //         barStyle.backgroundColor = SECONDARY_COLOR;\n    //         console.log(arrayBars[i]);\n    //     }\n    // }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const isPartition = animations[i][0] === \"partition1\" || animations[i][0] === \"partition2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isPartition === true) {\n                const[partition, barIndex] = animations[i];\n                const color = (animations[i][0] === \"partition1\") ?  TERTIARY_COLOR : PRIMARY_COLOR;\n                const partBarStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    partBarStyle.backgroundColor = color;\n                }, i * this.state.ANIMATION_SPEED_MS)\n            }\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * this.state.ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * this.state.ANIMATION_SPEED_MS);  \n            }        \n            } \n        } \n\n    getAnimations(animations) {\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * this.state.ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * this.state.ANIMATION_SPEED_MS);  \n            }        \n        } \n    }\n\n    selectionSort() {\n        const animations = getSelectionSortAnimations(this.state.array);\n        this.getAnimations(animations);\n    }\n\n    insertionSort() {\n        const animations = getInsertionSortAnimations(this.state.array);\n        this.getAnimations(animations);  \n    }\n\n    render() {\n    const {array} = this.state;\n\n    return (\n        <div className= \"maindiv\">\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div className=\"array-bar\" key={idx} \n                        style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            height: `${value}px`,\n                        }}>\n                    </div>\n                ))}\n            </div>\n            <div>Algorithm Animations: </div>\n            <div className=\"topnav\">\n                <Slider\n                    min={0}\n                    max={10}\n                    value={this.state.ANIMATION_SPEED_MS}\n                    orientation=\"horizontal\"\n                    onChange={(value) => this.setSpeed(value)}\n                />\n                <div className='value'>Speed: {this.state.ANIMATION_SPEED_MS} ms</div>\n                <div className='reset_button'>\n                    <button className='button' onClick={() => this.resetArray()}>Generate New Array</button>\n                </div>\n                <div className='sort_buttons'>\n                    <button className='button' onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button className='button' onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button className='button' onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button className='button' onClick={() => this.insertionSort()}>Insertion Sort</button>\n                </div>\n            </div>\n        </div>\n    );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"]},"metadata":{},"sourceType":"module"}