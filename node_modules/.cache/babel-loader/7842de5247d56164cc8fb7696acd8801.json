{"ast":null,"code":"/* MERGESORT */\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n/* QUICKSORT */\n\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (high <= low) return; //partition array\n\n  let j = partition(array, low, high, animations); // sort low\n\n  doQuick(array, low, j - 1, animations); //sort high\n\n  doQuick(array, j + 1, high, animations);\n}\n\nfunction partition(array, low, high, animations) {\n  let i = low,\n      j = high + 1;\n  let pElement = array[low]; // Set color of partitioning element to black\n\n  animations.push([\"partition1\", low]);\n\n  while (true) {\n    while (array[++i] < pElement) {\n      if (i === high) break;\n    }\n\n    while (pElement < array[--j]) {\n      if (j === low) break;\n    }\n\n    if (i >= j) break;\n    exch(array, i, j, animations);\n  }\n\n  exch(array, low, j, animations);\n  animations.push([\"partition2\", low]);\n  return j;\n}\n\nfunction exch(array, i, j, animations) {\n  let temp = array[i]; // Set elements being compared to Red\n\n  animations.push([\"comparison1\", i, j]); // Swap sizes of both indexes\n\n  animations.push([\"swap\", i, array[j]]);\n  animations.push([\"swap\", j, temp]);\n  let swap = array[i];\n  array[i] = array[j];\n  array[j] = swap; // Change elements being compared back to green\n\n  animations.push([\"comparison2\", i, j]);\n}\n/* SELCTION SORT */\n\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  let N = array.length;\n\n  for (let i = 0; i < N; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < N; j++) {\n      if (array[j] < array[min]) min = j;\n    }\n\n    exch(array, i, min, animations);\n  }\n\n  return animations;\n}\n/* INSERTION SORT */\n\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  let N = array.length;\n\n  for (let i = 0; i < N; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < N; j++) {\n      if (array[j] < array[min]) min = j;\n    }\n\n    exch(array, i, min, animations);\n  }\n\n  return animations;\n}","map":{"version":3,"sources":["/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingAlgorithms/SortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getQuickSortAnimations","doQuick","low","high","partition","pElement","exch","temp","swap","getSelectionSortAnimations","N","min","getInsertionSortAnimations"],"mappings":"AAAA;AACA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvB,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,cAA7B,EAA6CF,UAA7C,CAAf;AACA,SAAOA,UAAP;AACD;;AAED,SAASI,eAAT,CACEC,SADF,EAEEC,QAFF,EAGEC,MAHF,EAIEL,cAJF,EAKEF,UALF,EAME;AACA,MAAIM,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAH,EAAAA,eAAe,CAACF,cAAD,EAAiBI,QAAjB,EAA2BE,SAA3B,EAAsCH,SAAtC,EAAiDL,UAAjD,CAAf;AACAI,EAAAA,eAAe,CAACF,cAAD,EAAiBM,SAAS,GAAG,CAA7B,EAAgCD,MAAhC,EAAwCF,SAAxC,EAAmDL,UAAnD,CAAf;AACAW,EAAAA,OAAO,CAACN,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCL,cAAzC,EAAyDF,UAAzD,CAAP;AACD;;AAED,SAASW,OAAT,CACEN,SADF,EAEEC,QAFF,EAGEE,SAHF,EAIED,MAJF,EAKEL,cALF,EAMEF,UANF,EAOE;AACA,MAAIY,CAAC,GAAGN,QAAR;AACA,MAAIO,CAAC,GAAGP,QAAR;AACA,MAAIQ,CAAC,GAAGN,SAAS,GAAG,CAApB;;AACA,SAAOK,CAAC,IAAIL,SAAL,IAAkBM,CAAC,IAAIP,MAA9B,EAAsC;AACpC;AACA;AACAP,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIC,CAAJ,CAAhB,EAHoC,CAIpC;AACA;;AACAd,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIC,CAAJ,CAAhB;;AACA,QAAIZ,cAAc,CAACW,CAAD,CAAd,IAAqBX,cAAc,CAACY,CAAD,CAAvC,EAA4C;AAC1C;AACA;AACAd,MAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACW,CAAD,CAAlB,CAAhB;AACAR,MAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACW,CAAC,EAAF,CAA/B;AACD,KALD,MAKO;AACL;AACA;AACAb,MAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACY,CAAD,CAAlB,CAAhB;AACAT,MAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;AACF;;AACD,SAAOD,CAAC,IAAIL,SAAZ,EAAuB;AACrB;AACA;AACAR,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIA,CAAJ,CAAhB,EAHqB,CAIrB;AACA;;AACAb,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACF,CAAD,EAAIA,CAAJ,CAAhB,EANqB,CAOrB;AACA;;AACAb,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACW,CAAD,CAAlB,CAAhB;AACAR,IAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACW,CAAC,EAAF,CAA/B;AACD;;AACD,SAAOC,CAAC,IAAIP,MAAZ,EAAoB;AAClB;AACA;AACAP,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAJ,CAAhB,EAHkB,CAIlB;AACA;;AACAd,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAJ,CAAhB,EANkB,CAOlB;AACA;;AACAd,IAAAA,UAAU,CAACe,IAAX,CAAgB,CAACH,CAAD,EAAIV,cAAc,CAACY,CAAD,CAAlB,CAAhB;AACAT,IAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;AACF;AAED;;;AACA,OAAO,SAASE,sBAAT,CAAgCjB,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBkB,EAAAA,OAAO,CAAClB,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BD,UAA7B,CAAP;AACA,SAAOA,UAAP;AACD;;AAED,SAASiB,OAAT,CAAiBlB,KAAjB,EAAwBmB,GAAxB,EAA6BC,IAA7B,EAAmCnB,UAAnC,EAA+C;AAC7C,MAAImB,IAAI,IAAID,GAAZ,EAAiB,OAD4B,CAE7C;;AACA,MAAIJ,CAAC,GAAGM,SAAS,CAACrB,KAAD,EAAQmB,GAAR,EAAaC,IAAb,EAAmBnB,UAAnB,CAAjB,CAH6C,CAI7C;;AACAiB,EAAAA,OAAO,CAAClB,KAAD,EAAQmB,GAAR,EAAaJ,CAAC,GAAC,CAAf,EAAkBd,UAAlB,CAAP,CAL6C,CAM7C;;AACAiB,EAAAA,OAAO,CAAClB,KAAD,EAAQe,CAAC,GAAC,CAAV,EAAaK,IAAb,EAAmBnB,UAAnB,CAAP;AACD;;AAED,SAASoB,SAAT,CAAmBrB,KAAnB,EAA0BmB,GAA1B,EAA+BC,IAA/B,EAAqCnB,UAArC,EAAiD;AAC/C,MAAIa,CAAC,GAAGK,GAAR;AAAA,MAAaJ,CAAC,GAAGK,IAAI,GAAC,CAAtB;AACA,MAAIE,QAAQ,GAAGtB,KAAK,CAACmB,GAAD,CAApB,CAF+C,CAG/C;;AACAlB,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,YAAD,EAAeG,GAAf,CAAhB;;AACA,SAAO,IAAP,EAAa;AACX,WAAOnB,KAAK,CAAC,EAAEc,CAAH,CAAL,GAAaQ,QAApB,EAA8B;AAC5B,UAAIR,CAAC,KAAKM,IAAV,EAAgB;AACjB;;AACD,WAAOE,QAAQ,GAAGtB,KAAK,CAAC,EAAEe,CAAH,CAAvB,EAA8B;AAC5B,UAAIA,CAAC,KAAKI,GAAV,EAAe;AAChB;;AACD,QAAIL,CAAC,IAAIC,CAAT,EAAY;AACZQ,IAAAA,IAAI,CAACvB,KAAD,EAAQc,CAAR,EAAWC,CAAX,EAAcd,UAAd,CAAJ;AACD;;AACDsB,EAAAA,IAAI,CAACvB,KAAD,EAAQmB,GAAR,EAAaJ,CAAb,EAAgBd,UAAhB,CAAJ;AACAA,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,YAAD,EAAeG,GAAf,CAAhB;AACA,SAAOJ,CAAP;AACD;;AAED,SAASQ,IAAT,CAAcvB,KAAd,EAAqBc,CAArB,EAAwBC,CAAxB,EAA2Bd,UAA3B,EAAuC;AACrC,MAAIuB,IAAI,GAAGxB,KAAK,CAACc,CAAD,CAAhB,CADqC,CAErC;;AACAb,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,aAAD,EAAgBF,CAAhB,EAAmBC,CAAnB,CAAhB,EAHqC,CAIrC;;AACAd,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,MAAD,EAASF,CAAT,EAAYd,KAAK,CAACe,CAAD,CAAjB,CAAhB;AACAd,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,MAAD,EAASD,CAAT,EAAYS,IAAZ,CAAhB;AACA,MAAIC,IAAI,GAAGzB,KAAK,CAACc,CAAD,CAAhB;AACAd,EAAAA,KAAK,CAACc,CAAD,CAAL,GAAWd,KAAK,CAACe,CAAD,CAAhB;AACAf,EAAAA,KAAK,CAACe,CAAD,CAAL,GAAWU,IAAX,CATqC,CAUrC;;AACAxB,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAAC,aAAD,EAAgBF,CAAhB,EAAmBC,CAAnB,CAAhB;AACD;AAED;;;AACA,OAAO,SAASW,0BAAT,CAAoC1B,KAApC,EAA2C;AAChD,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAI0B,CAAC,GAAG3B,KAAK,CAACE,MAAd;;AACA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,CAApB,EAAuBb,CAAC,EAAxB,EAA4B;AAC1B,QAAIc,GAAG,GAAGd,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAGD,CAAC,GAAC,CAAf,EAAkBC,CAAC,GAAGY,CAAtB,EAAyBZ,CAAC,EAA1B,EAA8B;AAC5B,UAAIf,KAAK,CAACe,CAAD,CAAL,GAAWf,KAAK,CAAC4B,GAAD,CAApB,EAA2BA,GAAG,GAAGb,CAAN;AAC5B;;AACDQ,IAAAA,IAAI,CAACvB,KAAD,EAAQc,CAAR,EAAWc,GAAX,EAAgB3B,UAAhB,CAAJ;AAED;;AACD,SAAOA,UAAP;AACD;AAED;;AACA,OAAO,SAAS4B,0BAAT,CAAoC7B,KAApC,EAA2C;AAChD,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAI0B,CAAC,GAAG3B,KAAK,CAACE,MAAd;;AACA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,CAApB,EAAuBb,CAAC,EAAxB,EAA4B;AAC1B,QAAIc,GAAG,GAAGd,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAGD,CAAC,GAAC,CAAf,EAAkBC,CAAC,GAAGY,CAAtB,EAAyBZ,CAAC,EAA1B,EAA8B;AAC5B,UAAIf,KAAK,CAACe,CAAD,CAAL,GAAWf,KAAK,CAAC4B,GAAD,CAApB,EAA2BA,GAAG,GAAGb,CAAN;AAC5B;;AACDQ,IAAAA,IAAI,CAACvB,KAAD,EAAQc,CAAR,EAAWc,GAAX,EAAgB3B,UAAhB,CAAJ;AAED;;AACD,SAAOA,UAAP;AACD","sourcesContent":["/* MERGESORT */\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n  \nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n/* QUICKSORT */\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doQuick(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (high <= low) return;\n  //partition array\n  let j = partition(array, low, high, animations);\n  // sort low\n  doQuick(array, low, j-1, animations);\n  //sort high\n  doQuick(array, j+1, high, animations);\n}\n\nfunction partition(array, low, high, animations) {\n  let i = low, j = high+1;\n  let pElement = array[low];\n  // Set color of partitioning element to black\n  animations.push([\"partition1\", low]);\n  while (true) {\n    while (array[++i] < pElement) {\n      if (i === high) break;\n    }\n    while (pElement < array[--j]) {\n      if (j === low) break;\n    }\n    if (i >= j) break;\n    exch(array, i, j, animations);\n  }\n  exch(array, low, j, animations);\n  animations.push([\"partition2\", low]);\n  return j;\n}\n\nfunction exch(array, i, j, animations) {\n  let temp = array[i];\n  // Set elements being compared to Red\n  animations.push([\"comparison1\", i, j]);\n  // Swap sizes of both indexes\n  animations.push([\"swap\", i, array[j]]);\n  animations.push([\"swap\", j, temp]);\n  let swap = array[i];\n  array[i] = array[j];\n  array[j] = swap;\n  // Change elements being compared back to green\n  animations.push([\"comparison2\", i, j]);\n}\n\n/* SELCTION SORT */\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  let N = array.length;\n  for (let i = 0; i < N; i++) {\n    let min = i;\n    for (let j = i+1; j < N; j++) {\n      if (array[j] < array[min]) min = j;\n    }\n    exch(array, i, min, animations);\n    \n  }\n  return animations;\n}\n\n/* INSERTION SORT */\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  let N = array.length;\n  for (let i = 0; i < N; i++) {\n    let min = i;\n    for (let j = i+1; j < N; j++) {\n      if (array[j] < array[min]) min = j;\n    }\n    exch(array, i, min, animations);\n    \n  }\n  return animations;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}