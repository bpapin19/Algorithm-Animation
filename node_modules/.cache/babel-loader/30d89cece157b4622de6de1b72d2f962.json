{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n/* QUICKSORT */\n\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n\n  for (let i = 0; i < array.length; i++) {\n    console.log(array[i] + '\\n');\n  }\n\n  doQuick(shuffle(array), 0, array.length - 1, animations);\n\n  for (let i = 0; i < array.length; i++) {\n    console.log(array[i] + '\\n');\n  }\n\n  return animations;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction doQuick(array, low, high, animations) {\n  if (high <= low) return;\n  let j = partition(array, high, low);\n  console.log(\"in quick\" + j);\n}\n\nfunction partition(array, low, high) {\n  let i = low,\n      j = high + 1;\n  let pElement = array[low];\n\n  while (true) {\n    while (array[++i] > pElement) {\n      if (i === high) break;\n    }\n\n    while (pElement > array[--j]) {\n      if (j === low) break;\n    }\n\n    if (i >= j) break;\n    exch(array, low, j);\n    console.log(\"in partition\" + array[i]);\n  }\n\n  exch(array, low, j);\n  return j;\n}\n\nfunction exch(array, i, j) {\n  let swap = array[i];\n  array[i] = array[j];\n  array[j] = swap;\n  console.log(\"in exchange\" + array[i]);\n}","map":{"version":3,"sources":["/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingAlgorithms/SortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getQuickSortAnimations","console","log","doQuick","shuffle","currentIndex","temporaryValue","randomIndex","random","low","high","partition","pElement","exch","swap"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n  \nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n/* QUICKSORT */\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  for (let i = 0; i < array.length; i ++) {\n    console.log(array[i] + '\\n');\n  }\n  doQuick(shuffle(array), 0, array.length - 1, animations);\n  for (let i = 0; i < array.length; i ++) {\n    console.log(array[i] + '\\n');\n  }\n  return animations;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nfunction doQuick(\n  array,\n  low,\n  high,\n  animations,\n) {\n  if (high <= low) return;\n  let j = partition(array, high, low);\n  console.log(\"in quick\" + j);\n}\n\nfunction partition(array, low, high) {\n  let i = low, j = high+1;\n  let pElement = array[low];\n  while (true) {\n    while (array[++i] > pElement) {\n      if (i === high) break;\n    }\n    while (pElement > array[--j]) {\n      if (j === low) break;\n    }\n    if (i >= j) break;\n    exch(array, low, j);\n    console.log(\"in partition\" + array[i]);\n  }\n  exch(array, low, j);\n  return j;\n}\n\nfunction exch(array, i, j) {\n  let swap = array[i];\n  array[i] = array[j];\n  array[j] = swap;\n  console.log(\"in exchange\" + array[i]);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}