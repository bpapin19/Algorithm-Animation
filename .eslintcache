[{"/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/index.js":"1","/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/App.js":"2","/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingVisualizer/SortingVisualizer.jsx":"3","/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingAlgorithms/SortingAlgorithms.js":"4"},{"size":219,"mtime":1615339297814,"results":"5","hashOfConfig":"6"},{"size":300,"mtime":1615339297813,"results":"7","hashOfConfig":"6"},{"size":7680,"mtime":1615339297814,"results":"8","hashOfConfig":"6"},{"size":4670,"mtime":1615339297814,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"g2aiqv",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/index.js",[],["20","21"],"/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/App.js",[],"/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingVisualizer/SortingVisualizer.jsx",["22","23","24","25","26","27","28"],"import React, { Component } from \"react\";\nimport {getMergeSortAnimations, getQuickSortAnimations, getSelectionSortAnimations, getInsertionSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Slider from 'react-rangeslider';\nimport 'react-rangeslider/lib/index.css';\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// This is the color of the partitioning element throughout the animations.\nconst TERTIARY_COLOR = 'black';\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            ANIMATION_SPEED_MS: 4,\n            NUMBER_OF_ARRAY_BARS: 100\n        };\n    }\n\n    setSpeed(value) {\n        this.setState({\n          ANIMATION_SPEED_MS: value\n        })\n      }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i=0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const isPartition = animations[i][0] === \"partition1\" || animations[i][0] === \"partition2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isPartition === true) {\n                const[partition, barIndex] = animations[i];\n                const color = (animations[i][0] === \"partition1\") ?  TERTIARY_COLOR : PRIMARY_COLOR;\n                const partBarStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    partBarStyle.backgroundColor = color;\n                }, i * this.state.ANIMATION_SPEED_MS);\n            }\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * this.state.ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * this.state.ANIMATION_SPEED_MS);  \n            }        \n            } \n        } \n\n    getAnimations(animations) {\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] === \"comparison2\") ? PRIMARY_COLOR : SECONDARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex]?arrayBars[barOneIndex].style: {};\n                const barTwoStyle = arrayBars[barTwoIndex]?arrayBars[barTwoIndex].style: {};\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * this.state.ANIMATION_SPEED_MS);\n            } \n            else { \n                const [swap, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * this.state.ANIMATION_SPEED_MS);  \n            }        \n        } \n    }\n\n    selectionSort() {\n        const animations = getSelectionSortAnimations(this.state.array);\n        this.getAnimations(animations);\n    }\n\n    insertionSort() {\n        const animations = getInsertionSortAnimations(this.state.array);\n        this.getAnimations(animations);  \n    }\n\n    render() {\n    const {array} = this.state;\n\n    return (\n        <div>\n            <div className=\"topnav\">\n            <h1 className=\"heading\">Algorithm Animations</h1>\n            <p>Cycle through 4 different types of sorts.</p>\n                <Slider\n                    min={0}\n                    max={10}\n                    value={this.state.ANIMATION_SPEED_MS}\n                    orientation=\"horizontal\"\n                    onChange={(value) => this.setSpeed(value)}\n                />\n                <div className='value'>Speed: {this.state.ANIMATION_SPEED_MS} ms</div>\n                <div className='reset_button'>\n                    <button className='button' onClick={() => this.resetArray()}>Generate New Array</button>\n                </div>\n                <div className='sort_buttons'>\n                    <button className='button' onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button className='button' onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button className='button' onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button className='button' onClick={() => this.insertionSort()}>Insertion Sort</button>\n                </div>\n            </div>\n            <div class=\"array-body\">\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div className=\"array-bar\" key={idx} \n                            style={{\n                                backgroundColor: PRIMARY_COLOR,\n                                height: `${value}px`,\n                            }}>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","/Users/brandonpapin/Desktop/CPSC 349 FE Web/sort-animation/src/SortingAlgorithms/SortingAlgorithms.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":26},{"ruleId":"33","severity":1,"message":"37","line":8,"column":7,"nodeType":"35","messageId":"36","endLine":8,"endColumn":27},{"ruleId":"33","severity":1,"message":"38","line":79,"column":23,"nodeType":"35","messageId":"36","endLine":79,"endColumn":32},{"ruleId":"33","severity":1,"message":"39","line":87,"column":24,"nodeType":"35","messageId":"36","endLine":87,"endColumn":34},{"ruleId":"33","severity":1,"message":"40","line":97,"column":24,"nodeType":"35","messageId":"36","endLine":97,"endColumn":28},{"ruleId":"33","severity":1,"message":"39","line":111,"column":24,"nodeType":"35","messageId":"36","endLine":111,"endColumn":34},{"ruleId":"33","severity":1,"message":"40","line":121,"column":24,"nodeType":"35","messageId":"36","endLine":121,"endColumn":28},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'NUMBER_OF_ARRAY_BARS' is assigned a value but never used.","'partition' is assigned a value but never used.","'comparison' is assigned a value but never used.","'swap' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]